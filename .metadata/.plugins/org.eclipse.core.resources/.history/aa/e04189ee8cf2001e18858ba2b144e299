22/03/2024
----------

data types - categories
-----------------------
	1. primitive data types
	2. non-primitive/ derived data types
	
1. primitive data types
----------------------
	- 8 primitive data types
		
		integers
		--------
		byte - 1 byte
		short - 2 bytes
		int - 4 bytes
		long - 8 bytes
		
		decimal numbers
		---------------
		float
		double
		
		boolean - true / false
		
		char
		
	- these primitive datatypes starts with small letter
	- these primitive datatypes are not objects
	
2. non-primitive/derived data types
-----------------------------------
	- arrays, classes, interfaces, enum
	- these are called derived data types because they are derived from the primitive data types 	
	
	
literals - fixed values
 
type casting
------------
	1. implicit casting
	2. explicit casting
	
connection between int and char

25/03/2024
----------
1. diff between System.out.print() and System.out.println()
	- System.out.print() - prints the output and cursor remains in the same line
	- System.out.println() - prints the output and cursor moves to a new line
	- Do we have System.out.printf() in java?
	
2. what is keyword, identifier and literal?
	keyword - Keywords are reserved words and these are predefined in Java which cannot be used as identifiers
	identifier - sequence of characters to identify something in program. 
			   - Eg: variable names, class names, package names, interface names, method names 
	literal - fixed values
	
3. Operators in Java
	categories
		- Arithmetic operators
			+ - * / %
		- Assignment operator
			=
		- Arithmetic assignment operator
			+= -+ *= /= %=
		- Relational operators
			< <= > >= == !=
		- Logical operators
			&& || !
		- Bitwise operators
			& | ! ^ << >> >>>
		- Ternary operator
			int c = a>b?a:b;
		- Increment/Decrement operator
			++ --
		
26/03/2024
----------	
	- 3 main sections of any program
		- input
			Scanner class which is java.util package
		- process
			use operators, flow control stmts, looping stmts
		- output
			System.out.println()
		
	- input from user
		- Scanner class which is in util package
		- Scanner is a utility class given to us by java
		- Scanner class uses the classes in java.io package to get input from the user
	
	- how to get the primitive data types as input from the user?
		- scan.nextByte() 
		- scan.nextShort()
		- scan.nextInt()
		- scan.nextLong()
		- scan.nextFloat()
		- scan.nextDouble()
		- scan.nextBoolean()
		- how do we get a char as input using Scanner?
		
		- scan.next() - used for string input
		- scan.nextLine() - used for string input
		
		- we know next() and nextLine() is used to scan String input. What is the difference between next() and nextLine()? 
		
	- what is 
		System.out	- refers to output/console/monitor
		System.in - refers to the input/keyboard
		System.err - refers to error output

27-03-2024
-----------
Decision making statements
----------------------------
	- if statements
		- simple if
		- if...else
		- else if ladder
		- nested if
		
	- switch statements
		- In Java, switch works only with 4 primitives and their wrappers, as well as with the enum type and String class.
		This is

			byte — Byte
			short — Short
			char — Character
			int — Integer
			Enum
			String

some of the important java features from java 8 to java 17
----------------------------------------------------------
java 8
------
	- lambda expressions and Stream API
	- Method References
	- Default methods
	- Type Annotations
	- Repeating Annotations
	- Method Parameter Reflection
java 9
------
	- Java Module System
	- try with resources
	- Diamond Syntax with Inner Anonymous Class
	- Private Interface Methods
java 10
-------
	- Introduction of var
java 11
-------
	- use of var inside lambda expressions
java 14
-------
	- switch expressions (different syntax for writing switch case)
	- the yield keyword
java 15
-------
	- text blocks ("""   """) ( similar to the back tick symbol(template strings) in Javascript)

java 16
-------
	- pattern matching of instanceof
	- Records
java 17
-------
	- Sealed classes

28/03/2024
----------
Looping statements in java
--------------------------
	- used when we want to perform a task multiple times
	- when working with loops be careful not to write an infinite loop
	- every time when the loop runs, we have to make sure that we are getting one step closer to ending the loop.
	- for a loop to run what do we need?
		- initial value : intial value on which the loop starts
		- condition : condition to enter the loop
		- expression (mostly inc/dec) : this expression will help us to get one step closer to the condition becoming false

	- generally to run a loop we use a variable and we call this as running variable
	- sometimes we may use the running variable in the repeated task that we want to perform 
	- while loop
		- is an entry control loop
	- do...while loop
		- is a exit control loop
		- the body of the loop will definetly execute once
	- for loop
		- here the initial value, condn and exp is given in the same line
		- it is convenient
		- is for loop an entry control or exit control loop?  - for loop is a entry control loop
		
29/03/2024
-----------
	- patterns in java using nested for loops
	- available in PatternLoopDemo.java
	- Also shared the java simple practise questions in github
	
01/04/2024
----------
	- methods in java
	- terminologies
		- method declaration
		- method definition
		- method invocation
		- method signature
			- can have methods with
				- no return type and no arguments
				- no return type and have arguments
				- with return type and no arguments
				- with return type and have arguments
	- working with methods involves 2 steps
		1. method definition
			- here we specify the method signature along with the method body
			- by writing the definition of the method , the method body does not get executed
		2. method invocation	
			- in order for the body of the method to execute, we should call the method
	
02/04/2-24
-----------
	- command line arguments
		- these are argument sent to the main method at the time of running the program
		- these argument could be values needed for the main method to intialize resources
		- created a demo program CommnadLineArgDemo.java
	- created a menu driven program for TwoDShapes
	
03/04/2024
-----------
	- classes and objects are the building blocks of object oriented programming
	
	
	- classes in java
		- a class is a design/blueprint/sketch/template/prototype
		- what can a class contain?
			- data members/properties/variables/fields/attributes  
			- member functions/methods  
		- eg:
				class Person {
					String name;
					double height;
					double weight;
					String gender;
					// int noOfKeys; // no meaning
					
					boolean run(){
						// code here
					}
					
					boolean sleep(){
						// code here
					}
					
					boolean eat(){
						// code here
					}
					
					// boolean magnify(){ // no meaning
					// }
				}
				
		- submissions
		
		Ankit Raj  to  Everyone 19:39
			public class Room {
			    private double length;
			    private double width;
			    private double height;
			    private double paintCostPerSqMeter;
			
			    public Room(double length, double width, double height, double paintCostPerSqMeter) {
			  
			    }
			
			    public double calculateFloorArea(){
			    }
			
			    public double calculateWallArea() {
			    }
			
			    public double calculatePaintCost() {
			        
			    }

		Sandhya Pulicharla  to  Everyone 19:42
			class Room{
			       double length;
			       double width;
			       double cost;
			       //take input from user(length,width)
			       //calculate area using method
			       double AreaOfFloor(){
			             //code}
			       double AreaOfWall(){
			             //multiply area with no.of.walls}
			        double PaintCost(){
			              //based on area calculate cost
			  }
		
		Emaaz Khot 19:46
			public class Room {
			private double length; // (in meters)
			private double width; // (in meters)
			private double height; //(in meters)
			private double carpetCostPerSquareMeter; // Cost per square meter of carpeting
			private double paintCostPerSquareMeter; // Cost per square meter of painting
			
			public Room(double length, double width, double height, double carpetCostPerSquareMeter, double paintCostPerSquareMeter) {
			    }
			    public double calculateFloorArea() {
			        
			    }
			
			    public double calculateWallArea() {        
			    }
			    
			    public double calculateCarpetCost() {
			       
			    }
			
			    public double calculatePaintCost() {
			    }
			
			    public static void main(String[] args) {
			    }
			}
		- memory structure
			stack memory
				- local variables will take memory in stack
				- a local variable if not initialized will hold garbage value
			heap memory
				- instance variables/data members take memory in heap 
				- an instance variable if not initialized will hold default values
					byte, short, int, long is 0
					float, double is 0.0
					boolean is false
					char is '\o'
					String is null

04/04/2024
-----------		
	- objects in java
	- stack and heap memory
	- local variable and instance variable memory allocations
	- local variable and instance variable default values
	- memory when methods are invoked
	- garbage collector
	